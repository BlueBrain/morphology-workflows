[build-system]
requires = [
    "setuptools>=45",
    "setuptools_scm[toml]>=6.2",
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.black]
line-length = 100
target-version = [
    "py38",
    "py39",
    "py310",
]

[tool.pydocstyle]
# ignore the following:
#   - D102: Missing docstring in public method
#   - D107: Missing docstring in __init__
add-ignore = [
    "D102",
    "D107",
]
convention = "google"

[tool.isort]
profile = "black"
line_length = 100
force_single_line = true

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:luigi",
    "ignore::DeprecationWarning:xarray",
    "ignore::DeprecationWarning:matplotlib",
    "ignore::DeprecationWarning:neurom.morphmath",
    "ignore::DeprecationWarning:neuror.unravel",
    "ignore::DeprecationWarning:setuptools",
    "ignore::DeprecationWarning:sphinx.util.docutil",
    "ignore::DeprecationWarning:sphinx.util.rst",
    "ignore::urllib3.exceptions.InsecureRequestWarning:urllib3",
    "ignore:Config file does not exist. luigi\\.cfg:UserWarning:luigi",
]

[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# select = ["ALL"]
# ignore = [
#     "ANN",
#     "D401",
#     "N803",
# ]
select = ["ALL"]
ignore = [
    # ignore the following flake8-annotations errors:
    "ANN",
    # ignore the following flake8-unused-arguments errors:
    "ARG005",
    # ignore the following mccabe errors:
    "C901",
    # ignore the following flake8-commas errors:
    "COM812",  # TODO: Enable this check and fix errors
    # ignore the following pydocstyle errors:
    "D102",  #   - D102: Missing docstring in public method
    "D107",  #   - D107: Missing docstring in __init__
    # ignore the following flake8-errmsg errors:
    "EM101",
    "EM102",
    # ignore the following eradicate errors:
    "ERA001",
    # ignore the following flake8-executable errors:
    "EXE",
    # ignore the following flake8-future-annotations errors:
    "FA",
    # ignore the following flake8-blind-except errors:
    "FBT",
    # ignore the following flake8-fixme errors:
    "FIX002",
    # ignore the following pep8-naming errors:
    "N801",
    "N802",
    "N803",
    # ignore the following Numpy errors:
    "NPY002",
    # ignore the following pandas-vet errors:
    "PD002",  # TODO: Enable this check and fix errors
    "PD003",  # TODO: Enable this check and fix errors
    "PD011",  # TODO: Enable this check and fix errors
    "PD013",  # TODO: Enable this check and fix errors
    "PD901",
    # ignore the following Pylint errors:
    "PLR2004",
    # ignore the following flake8-use-pathlib errors:
    "PTH123",
    # ignore the following flake8-return errors:
    "RET505",
    # ignore the following Ruff errors:
    "RUF012",
    # ignore the following flake8-bandit errors:
    "S",
    # ignore the following flake8-simplify errors:
    "SIM105",
    "SIM108",
    "SIM110",
    # ignore the following flake8-todos errors:
    "TD002",
    "TD003",
    # ignore the following pyupgrades errors:
    "UP015",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pytype",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "venv",
]
per-file-ignores = {}

# Same as Black.
line-length = 100

# Allow unused variables when underscore-prefixed.
# dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.8
target-version = "py38"

# [tool.ruff.flake8-bandit]
# skips = [
#     "*_test.py",
#     "*test_*.py",
# ]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
force-single-line = true
known-first-party = ["morphology_workflows"]

[tool.ruff.pylint]
# Maximum number of arguments for function / method
max-args=8
# Maximum number of return / yield for function / method body
max-returns=6
# Maximum number of branch for function / method body
max-branches=12
# Maximum number of statements in function / method body
max-statements=50
